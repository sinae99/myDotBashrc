UNDERSTAND TASK
- Identify service type: web, DB, cache, monitoring, etc.
- Determine requirements: port, protocol, access, security

CHECK ENVIRONMENT
- OS & version: hostnamectl
- Resources: df -h, free -h, uptime
- Network interfaces: ip a, ss -tulnp
- Running services/conflicts: systemctl list-units

PLAN INSTALLATION
- Package manager: apt, yum, dnf
- Check if installed: systemctl status <service>
- Backup existing configs

INSTALL & ENABLE SERVICE
- Install: apt install <service> -y
- Enable on boot: systemctl enable <service>
- Start service: systemctl start <service>

CONFIGURE SERVICE
- Edit configs: /etc/<service>/<config_file>
- Check syntax: nginx -t, apachectl configtest, or service-specific
- Apply changes: reload/restart

NETWORK & ACCESS
- Listening ports: ss -tulnp | grep <port>
- Remote test: curl -I http://<server_ip>:<port>
- Firewall rules: ufw, firewall-cmd

VERIFY & TEST
- Service status: systemctl status <service>
- Check logs: journalctl -u <service>
- Resource usage: top, htop, vmstat
- Functional test: web page loads, DB query works

MONITORING
- Tail logs: tail -f /var/log/<service>/*
- System monitoring: top, htop, vmstat, iostat
- Optional service monitoring: Prometheus, Nagios

TROUBLESHOOTING
- Service not starting → check config & logs
- Service not reachable → firewall, SELinux, ports
- Resource problem → disk, memory, CPU
- Permission problem → file ownership, access rights

DOCUMENTATION & CLEAN-UP
- Record step-by-step actions
- Backup configs & notes
- Ensure service survives reboot: systemctl is-enabled <service>
- Check all endpoints again

###############################################################
# END OF CHECKLIST
###############################################################
